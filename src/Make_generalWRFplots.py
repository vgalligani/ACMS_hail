import os import datetimeimport globimport matplotlib.pyplot as pltfrom netCDF4 import Datasetimport numpy as npimport wrfimport Plots4Analysis as P4Aimport re import package_functions as funsimport pyart import config_foldersfrom Plots4Analysis  import pyplot_ringsfrom matplotlib.patches import Polygonimport netCDF4 as ncplt.matplotlib.rc('font', family='serif', size = 12)plt.rcParams['xtick.labelsize']=12plt.rcParams['ytick.labelsize']=12  #------------------------------------------------------------------------------def plot_radar_singletime(rfiles, time, elev, latrange, lonrange):    prov = np.genfromtxt("/home/vito.galligani/Work/Tools/Maps/provincias.txt", delimiter='')    # RMA1     radarLAT_RMA1 = -31.441389    radarLON_RMA1 = -64.191944    TH_name       = 'TH'    time1infile  = 82        folders          = config_folders.config_folders('yakaira')    radar_folder     = folders['rma1_dir']    save_dir_compare = folders['save_dir_compare']       filename = os.path.join(radar_folder, rfiles)    radar    = pyart.io.read(filename)     radarLAT_RMA1 = -31.441389    radarLON_RMA1 = -64.191944    [lat_radius, lon_radius] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,120)       [lat_radius2, lon_radius2] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,220)         # Configure a gatefilter to filter out copolar correlation coefficient values > 0.9    gatefilter = pyart.filters.GateFilter(radar)    gatefilter.exclude_transition()    gatefilter.exclude_equal('RHOHV', 0.9)        ZHelev18 = radar.get_field(elev, TH_name, copy=False)    [lats_, lons_, _] = radar.get_gate_lat_lon_alt(elev, reset_gate_coords=False, filter_transitions=False)    fig, ax = plt.subplots(figsize=(8,8))     pcm = ax.pcolormesh(lons_, lats_, ZHelev18, cmap=P4A.colormaps('ref'), vmin=0,  vmax=70)    cbar = plt.colorbar(pcm, ax=ax, shrink=1, label='Zh RMA1 elev 3')    cbar.cmap.set_under('white')    ax.grid()           ax.plot(prov[:,0],prov[:,1],color='k');     ax.set_xlim(lonrange);     ax.set_ylim(latrange)    ax.set_title('RMA1 zoom obs elev '+str(elev)+ 'at ' + time)    ax.plot(lon_radius, lat_radius, 'k', linewidth=0.8)    ax.plot(lon_radius2, lat_radius2, 'k', linewidth=0.8)        plt.show()    fig.savefig(save_dir_compare+'/OBS'+'/ZH_RMA1_obs_'+time+'.png', dpi=300,transparent=False, bbox_inches='tight')        return#------------------------------------------------------------------------------def plot_ZH1km_WRF(EXP, title):    folders   = config_folders.config_folders('yakaira')    WRFfolder = folders[EXP]    save_dir_compare = folders['save_dir_compare']    prov = np.genfromtxt("/home/vito.galligani/Work/Tools/Maps/provincias.txt", delimiter='')        fn = '/home/vito.galligani/Work/Tools/etopo1_bedrock.nc'    ds = nc.Dataset(fn)    topo_lat = ds.variables['lat'][:]    topo_lon = ds.variables['lon'][:]    topo_dat = ds.variables['Band1'][:]/1e3        lons_topo, lats_topo = np.meshgrid(topo_lon,topo_lat)        radarLAT_RMA1 = -31.441389    radarLON_RMA1 = -64.191944    [lat_radius, lon_radius] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,120)       [lat_radius2, lon_radius2] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,220)           prefix   = 'wrfout_d02_2018-11-10_'+title    filename = os.path.join(WRFfolder, 'wrfout_d02_2018-11-10_'+title+':00')        ncfile       = Dataset(filename,'r')            z            = wrf.getvar( ncfile,"z")     zh           = wrf.getvar(ncfile, "REFL_10CM")    REFL_10CM    = wrf.interplevel(zh, z, 1000)    lat          = wrf.getvar( ncfile,"lat")     lon          = wrf.getvar( ncfile,"lon")    fig, ax = plt.subplots(figsize=(8,8))     pcm = ax.pcolormesh(lon, lat,  REFL_10CM, cmap=P4A.colormaps('ref'), vmin=0,  vmax=70)    cbar = plt.colorbar(pcm, ax=ax, shrink=1)    ax.plot(prov[:,0],prov[:,1],color='k');             if 'Maite' in title:         ax.set_xlim([-65,-63.9]);         ax.set_ylim([-33,-31.5])                    else:        ax.set_xlim([-65.5,-62]);         ax.set_ylim([-35,-31])    ax.plot(lon_radius, lat_radius, 'k', linewidth=0.8)    ax.plot(lon_radius2, lat_radius2, 'k', linewidth=0.8)            # agrego contorno de 500 y 1000m    ax.contour(lons_topo, lats_topo, topo_dat, levels=[0.5,1], colors=['k','k'], linewidths=2)            cbar.cmap.set_under('white')    ax.grid()    ax.set_title('Zh interp. at 1km at '+title)        ax.text(x=-65, y=-34.9, s='120 and 220 km radar rings')    plt.show()    fig.savefig(save_dir_compare+'/'+EXP+'/WRF_ZH1km_general_evolution_'+title+'.png', dpi=300,transparent=False,bbox_inches='tight')        return#------------------------------------------------------------------------------                #------------------------------------------------------------------------------def plot_ZH1_COLMAX_WRF(EXP, title):    folders   = config_folders.config_folders('yakaira')    WRFfolder = folders[EXP]    save_dir_compare = folders['save_dir_compare']    prov = np.genfromtxt("/home/vito.galligani/Work/Tools/Maps/provincias.txt", delimiter='')        fn = '/home/vito.galligani/Work/Tools/etopo1_bedrock.nc'    ds = nc.Dataset(fn)    topo_lat = ds.variables['lat'][:]    topo_lon = ds.variables['lon'][:]    topo_dat = ds.variables['Band1'][:]/1e3        lons_topo, lats_topo = np.meshgrid(topo_lon,topo_lat)        radarLAT_RMA1 = -31.441389    radarLON_RMA1 = -64.191944    [lat_radius, lon_radius] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,120)       [lat_radius2, lon_radius2] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,220)           prefix   = 'wrfout_d02_2018-11-10_'+title    filename = os.path.join(WRFfolder, 'wrfout_d02_2018-11-10_'+title+':00')        ncfile       = Dataset(filename,'r')            z            = wrf.getvar( ncfile,"z")     zh           = wrf.getvar(ncfile, "REFL_10CM")    REFL_10CM    = np.nanmax(zh, axis=0)    lat          = wrf.getvar( ncfile,"lat")     lon          = wrf.getvar( ncfile,"lon")    fig, ax = plt.subplots(figsize=(8,8))     pcm = ax.pcolormesh(lon, lat,  REFL_10CM, cmap=P4A.colormaps('ref'), vmin=0,  vmax=70)    cbar = plt.colorbar(pcm, ax=ax, shrink=1)    ax.plot(prov[:,0],prov[:,1],color='k');             if 'Maite' in title:         ax.set_xlim([-65,-63.9]);         ax.set_ylim([-33,-31.5])                    else:        ax.set_xlim([-65.5,-62]);         ax.set_ylim([-35,-31])    ax.plot(lon_radius, lat_radius, 'k', linewidth=0.8)    ax.plot(lon_radius2, lat_radius2, 'k', linewidth=0.8)            # agrego contorno de 500 y 1000m    ax.contour(lons_topo, lats_topo, topo_dat, levels=[0.5,1], colors=['k','k'], linewidths=2)            cbar.cmap.set_under('white')    ax.grid()    ax.set_title('Zh COLMAX at '+title)        ax.text(x=-65, y=-34.9, s='120 and 220 km radar rings')    plt.show()    fig.savefig(save_dir_compare+'/'+EXP+'/WRF_ZHcolmax_general_evolution_'+title+'.png', dpi=300,transparent=False,bbox_inches='tight')        return#------------------------------------------------------------------------------        #------------------------------------------------------------------------------def plot_general_WRF_evolution(WRFfolder, title, save_dir_compare, other_WRFfolder, OTHER_NAME):    prov = np.genfromtxt("/home/vito.galligani/Work/Tools/Maps/provincias.txt", delimiter='')        fn = '/home/vito.galligani/Work/Tools/etopo1_bedrock.nc'    ds = nc.Dataset(fn)    topo_lat = ds.variables['lat'][:]    topo_lon = ds.variables['lon'][:]    topo_dat = ds.variables['Band1'][:]/1e3        lons_topo, lats_topo = np.meshgrid(topo_lon,topo_lat)        radarLAT_RMA1 = -31.441389    radarLON_RMA1 = -64.191944    [lat_radius, lon_radius] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,120)       [lat_radius2, lon_radius2] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,220)           start_time_1    = 1200        all_files_ = sorted(glob.glob(os.path.join(WRFfolder, 'wrfout_d02_2018-11-10*')))    prefix = 'wrfout_d02_2018-11-10_'    start_index = all_files_[0].find(prefix) + len(prefix)                # filter and keep only the hh:00 or hh:30 files    all_files = [f for f in all_files_ if f[-5:-3] in ("00", "30")]            # Filter filenames based on HH:MM > '12:00' and < 22:00 HARDCODED    filtered_files = [        file for file in all_files        if start_time_1-10 < int(os.path.basename(file).split('_')[3].split(':')[0]) * 100 +           int(os.path.basename(file).split('_')[3].split(':')[1]) < 2200 ]            fig, axes = plt.subplots(nrows=4, ncols=5, constrained_layout=True,figsize=[20,20])    for ax, filename in zip(axes.flat, filtered_files):        times = filename[start_index:start_index+5]           ncfile       = Dataset(filename,'r')                REFL_10CM    = np.nanmax(wrf.getvar(ncfile, "REFL_10CM"), axis=0)        lat          = wrf.getvar( ncfile,"lat")         lon          = wrf.getvar( ncfile,"lon")        pcm = ax.pcolormesh(lon, lat,  REFL_10CM, cmap=P4A.colormaps('ref'), vmin=0,  vmax=70)        cbar = plt.colorbar(pcm, ax=ax, shrink=1)        ax.plot(prov[:,0],prov[:,1],color='k');         #ax.set_xlim([-68,-62]);         #ax.set_ylim([-36,-30])                if 'Maite' in title:             ax.set_xlim([-65,-63.9]);             ax.set_ylim([-33,-31.5])                        else:            ax.set_xlim([-65.5,-62]);             ax.set_ylim([-35,-31])            ax.plot(lon_radius, lat_radius, 'k', linewidth=0.8)            ax.plot(lon_radius2, lat_radius2, 'k', linewidth=0.8)                # agrego contorno de 500 y 1000m        ax.contour(lons_topo, lats_topo, topo_dat, levels=[0.5,1], colors=['k','k'], linewidths=2)                cbar.cmap.set_under('white')        ax.grid()        ax.set_title(title+' '+times)        plt.suptitle('COLMAX')    # =============================================================================#         #read the other model output to add contours#         THEFILE = os.path.basename(filename)#         ncfile_other       = Dataset(other_WRFfolder+THEFILE,'r')#         print(other_WRFfolder+THEFILE)#         REFL_10CM = np.nanmax(wrf.getvar(ncfile_other, "REFL_10CM"), axis=0)#         lat       =  wrf.getvar( ncfile_other,"lat") #         lon       =  wrf.getvar( ncfile_other,"lon")#         cont = ax.contour(lon, lat, REFL_10CM, levels=[50], colors=['darkblue'], linewidths=1.2)#         # ALSO ADD THE ACTUAL OBSERVATION CONTOUR? #        cont2 = ax.contour(lons_, lats_, colmax, levels=[50], colors=['magenta'], linewidths=2)        # =============================================================================    ax.text(x=-65, y=-34.8, s='120 and 220 km radar rings')            plt.show()    if 'Maite' in title:         titleforfolder = title.replace('_Maitezoom', '')        fig.savefig(save_dir_compare+'/'+titleforfolder+'/WRF_ZHcolmax_general_evolution_'+title+'.png', dpi=300,transparent=False)    else:         fig.savefig(save_dir_compare+'/'+title+'/WRF_ZHcolmax_general_evolution_'+title+'.png', dpi=300,transparent=False)        fig, axes = plt.subplots(nrows=4, ncols=5, constrained_layout=True,figsize=[20,20])    for ax, filename in zip(axes.flat, filtered_files):        times = filename[start_index:start_index+5]           ncfile       = Dataset(filename,'r')                #REFL_10CM    = np.nanmax(wrf.getvar(ncfile, "REFL_10CM"), axis=0)        z            = wrf.getvar( ncfile,"z")         zh           = wrf.getvar(ncfile, "REFL_10CM")        REFL_10CM    = wrf.interplevel(zh, z, 1000)        lat          = wrf.getvar( ncfile,"lat")         lon          = wrf.getvar( ncfile,"lon")        pcm = ax.pcolormesh(lon, lat,  REFL_10CM, cmap=P4A.colormaps('ref'), vmin=0,  vmax=70)        cbar = plt.colorbar(pcm, ax=ax, shrink=1)        ax.plot(prov[:,0],prov[:,1],color='k');         #ax.set_xlim([-68,-62]);         #ax.set_ylim([-36,-30])                if 'Maite' in title:             ax.set_xlim([-65,-63.9]);             ax.set_ylim([-33,-31.5])                        else:            ax.set_xlim([-65.5,-62]);             ax.set_ylim([-35,-31])            ax.plot(lon_radius, lat_radius, 'k', linewidth=0.8)            ax.plot(lon_radius2, lat_radius2, 'k', linewidth=0.8)                # agrego contorno de 500 y 1000m        ax.contour(lons_topo, lats_topo, topo_dat, levels=[0.5,1], colors=['k','k'], linewidths=2)                cbar.cmap.set_under('white')        ax.grid()        ax.set_title(title+' '+times)              plt.suptitle('Zh interp. at 1km')# =============================================================================#         #read the other model output to add contours#         THEFILE = os.path.basename(filename)#         ncfile_other       = Dataset(other_WRFfolder+THEFILE,'r')#         print(other_WRFfolder+THEFILE)#         REFL_10CM = np.nanmax(wrf.getvar(ncfile_other, "REFL_10CM"), axis=0)#         lat       =  wrf.getvar( ncfile_other,"lat") #         lon       =  wrf.getvar( ncfile_other,"lon")#         cont = ax.contour(lon, lat, REFL_10CM, levels=[50], colors=['darkblue'], linewidths=1.2)#         # ALSO ADD THE ACTUAL OBSERVATION CONTOUR? #        cont2 = ax.contour(lons_, lats_, colmax, levels=[50], colors=['magenta'], linewidths=2)        # =============================================================================    ax.text(x=-65, y=-34.8, s='120 and 220 km radar rings')            plt.show()        if 'Maite' in title:         titleforfolder = title.replace('_Maitezoom', '')        fig.savefig(save_dir_compare+'/'+titleforfolder+'/WRF_Zh1km_general_evolution_'+title+'.png', dpi=300,transparent=False)    else:        fig.savefig(save_dir_compare+'/'+title+'/WRF_Zh1km_general_evolution_'+title+'.png', dpi=300,transparent=False)        return#------------------------------------------------------------------------------        #------------------------------------------------------------------------------def plot_general_radar_evolution(radar_folder, title, save_dir_compare, elev):    prov = np.genfromtxt("/home/vito.galligani/Work/Tools/Maps/provincias.txt", delimiter='')    # RMA1     radarLAT_RMA1 = -31.441389    radarLON_RMA1 = -64.191944    TH_name       = 'TH'    time1infile  = 82        wildfiles    = 'cfrad.20181110*01.nc'  # try also with .02.nc maybe?         file_pattern = os.path.join(radar_folder, wildfiles)    file_list    = sorted(glob.glob(file_pattern))    timesr       = [filename[time1infile:time1infile+4] for filename in file_list]            # Step 1: Round each time to the nearest 10 minutes    rounded_minutes = [int(round(funs.hhmm_to_minutes(t) / 10) * 10) for t in timesr]    # Step 2: Create an array with NaN values for all intervals    timereso   = 30    start_time = 17*60 # remplazar por 12    end_time   = 21*60 #(21*60)+30            all_times_minutes = np.arange(start_time, end_time + timereso, timereso)     time_array        = np.full(len(all_times_minutes), np.nan, dtype=object)    filename_array    = np.full(len(all_times_minutes), np.nan, dtype=object)        # Step 3: Fill in times (and filenames) where data is available    for i, rounded_time in enumerate(rounded_minutes):        index = np.where(all_times_minutes == rounded_time)[0]        if index.size > 0:            time_array[index[0]] = funs.minutes_to_hhmm(rounded_time)            filename_array[index[0]] = file_list[i]    # Convert all_times_minutes back to HHMM format for easy reading    all_times_hhmm = [funs.minutes_to_hhmm(m) for m in all_times_minutes]                        fig, axes = plt.subplots(nrows=4, ncols=5, constrained_layout=True,figsize=[20,20])    for ax, filename in zip(axes.flat, filename_array):        times = filename[time1infile:time1infile+4]        radar       = pyart.io.read(filename)                 # Configure a gatefilter to filter out copolar correlation coefficient values > 0.9        gatefilter = pyart.filters.GateFilter(radar)        gatefilter.exclude_transition()        gatefilter.exclude_equal('RHOHV', 0.9)                ZHelev18 = radar.get_field(elev, TH_name, copy=False)        [lats_, lons_, _] = radar.get_gate_lat_lon_alt(elev, reset_gate_coords=False, filter_transitions=False)        pcm = ax.pcolormesh(lons_, lats_, ZHelev18, cmap=P4A.colormaps('ref'), vmin=0,  vmax=70)        cbar = plt.colorbar(pcm, ax=ax, shrink=1, label='Zh RMA1 elev 3')        cbar.cmap.set_under('white')        ax.grid()               ax.plot(prov[:,0],prov[:,1],color='k');                 #ax.set_xlim([-68,-62]);         #ax.set_ylim([-36,-30])        ax.set_xlim([-65.5,-62]);         ax.set_ylim([-35,-31])                ax.set_title(title+' '+times)                      plt.show()    fig.savefig(save_dir_compare+'/'+title+'/radarOBS_general_evolution_'+title+'.png', dpi=300,transparent=False)        returndef plot_domain(server, exp):            folders=config_folders.config_folders(server)    save_dir = folders['save_dir_compare']    prov = np.genfromtxt("/home/vito.galligani/Work/Tools/Maps/provincias.txt", delimiter='')    folders=config_folders.config_folders('yakaira')        ncfile_d01 = Dataset( folders[exp]+'wrfout_d01_2018-11-10_17:00:00','r')         ncfile_d02 = Dataset( folders[exp]+'wrfout_d02_2018-11-10_16:00:00','r')            latd01          = wrf.getvar( ncfile_d01,"lat")     lond01          = wrf.getvar( ncfile_d01,"lon")    latd02          = wrf.getvar( ncfile_d02,"lat")     lond02          = wrf.getvar( ncfile_d02,"lon")        LANDMASK    = wrf.getvar(ncfile_d01, "LANDMASK")            lonmin = lond02.min()    latmin = latd02.min()    lonmax = lond02.max()    latmax = latd02.max()    vertices = [(lonmin,latmin),(lonmax,latmin),(lonmax,latmax),(lonmin,latmax)]    polygon = Polygon(vertices, closed=True, edgecolor='blue', facecolor='lightblue', linewidth=2)        fig, ax = plt.subplots(figsize=(8,8))     ax.pcolormesh(lond01, latd01, LANDMASK);    ax.add_patch(polygon)    ax.plot(prov[:,0],prov[:,1],color='k');     ax.set_ylim([-43,-20])    ax.set_title(exp)    ax.set_xlabel('Longitude')    ax.set_ylabel('Latitude')    plt.show()    fig.savefig(save_dir+'/domain_'+exp+'WRF.png', dpi=300,transparent=False)        return#------------------------------------------------------------------------------def single_WRF_files(WRFfolder, title, save_dir_compare):         prov = np.genfromtxt("/home/vito.galligani/Work/Tools/Maps/provincias.txt", delimiter='')        fn = '/home/vito.galligani/Work/Tools/etopo1_bedrock.nc'    ds = nc.Dataset(fn)    topo_lat = ds.variables['lat'][:]    topo_lon = ds.variables['lon'][:]    topo_dat = ds.variables['Band1'][:]/1e3        lons_topo, lats_topo = np.meshgrid(topo_lon,topo_lat)        radarLAT_RMA1 = -31.441389    radarLON_RMA1 = -64.191944    [lat_radius, lon_radius] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,120)       [lat_radius2, lon_radius2] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,220)           start_time_1    = 1200        all_files_ = sorted(glob.glob(os.path.join(WRFfolder, 'wrfout_d02_2018-11-10*')))    prefix = 'wrfout_d02_2018-11-10_'    start_index = all_files_[0].find(prefix) + len(prefix)                # filter and keep only the hh:00 or hh:30 files    all_files = [f for f in all_files_ if f[-5:-3] in ("00", "30")]            # Filter filenames based on HH:MM > '12:00' and < 22:00 HARDCODED    filtered_files = [        file for file in all_files        if start_time_1-10 < int(os.path.basename(file).split('_')[3].split(':')[0]) * 100 +           int(os.path.basename(file).split('_')[3].split(':')[1]) < 2200 ]            # for filename in filtered_files:            #     times = filename[start_index:start_index+5]       #     ncfile       = Dataset(filename,'r')            #     #REFL_10CM    = np.nanmax(wrf.getvar(ncfile, "REFL_10CM"), axis=0)    #     z            = wrf.getvar( ncfile,"z")     #     zh           = wrf.getvar(ncfile, "REFL_10CM")    #     REFL_10CM    = wrf.interplevel(zh, z, 1000)    #     lat          = wrf.getvar( ncfile,"lat")     #     lon          = wrf.getvar( ncfile,"lon")    #     fig, ax = plt.subplots(figsize=(8,8))     #     pcm = ax.pcolormesh(lon, lat,  REFL_10CM, cmap=P4A.colormaps('ref'), vmin=0,  vmax=70)    #     cbar = plt.colorbar(pcm, ax=ax, shrink=1)    #     ax.plot(prov[:,0],prov[:,1],color='k');         #     if 'Maite' in title:     #         ax.set_xlim([-65,-63.9]);     #         ax.set_ylim([-33,-31.5])    #     else:    #         ax.set_xlim([-65.5,-62]);     #         ax.set_ylim([-35,-31])    #         ax.plot(lon_radius, lat_radius, 'k', linewidth=0.8)    #         ax.plot(lon_radius2, lat_radius2, 'k', linewidth=0.8)                #     ax.set_title(title+' '+str(times))    #     fig.savefig(save_dir_compare+'/WRF_Zh1km_'+title+'_time'+str(times)+'.png', dpi=300,transparent=False)    #     plt.close()            counter=0    rain_prev=0    for filename in filtered_files:                times = filename[start_index:start_index+5]           ncfile       = Dataset(filename,'r')                rain         = wrf.getvar(ncfile, "RAINNC")        if counter >0:            rain = rain-rain_prev        rain_prev    = rain.copy()        lat          = wrf.getvar( ncfile,"lat")         lon          = wrf.getvar( ncfile,"lon")        fig, ax = plt.subplots(figsize=(8,8))         pcm = ax.pcolormesh(lon, lat,  rain, cmap=P4A.colormaps('ref'))        cbar = plt.colorbar(pcm, ax=ax, shrink=1)        ax.plot(prov[:,0],prov[:,1],color='k');             if 'Maite' in title:             ax.set_xlim([-65,-63.9]);             ax.set_ylim([-33,-31.5])        else:            ax.set_xlim([-65.5,-62]);             ax.set_ylim([-35,-31])            ax.plot(lon_radius, lat_radius, 'k', linewidth=0.8)            ax.plot(lon_radius2, lat_radius2, 'k', linewidth=0.8)                    ax.set_title(title+' '+str(times))        fig.savefig(save_dir_compare+'/WRF_RAINC_'+title+'_time'+str(times)+'.png', dpi=300,transparent=False, bbox_inches='tight')        plt.close()        counter=counter+1                    return#------------------------------------------------------------------------------def plot_common_transect_level_MAP(EXP_WSM6, time):    radarLAT_RMA1 = -31.441389    radarLON_RMA1 = -64.191944    folders=config_folders.config_folders('yakaira')    save_dir_compare=folders['save_dir_compare']        #---------------------------------------------------------    # WSM6 files    WSM6_file = os.path.join(folders[EXP_WSM6], 'wrfout_d02_2018-11-10_'+time+':00')        #---------------------------------------------------------    # P3 files    #folderP3_1    = os.path.join('/home/vito.galligani/datosmunin3/Work/HAILCASE_10112018_datos/WRFout_P3_3MOM_LF_v4.5.2/', 'wrfout_d02*00:00')    #file_listP3_1     = sorted(glob.glob(folderP3_1))    #timeNr_P3_1   = 98    #times_p3          = [filename[timeNr_P3_1:timeNr_P3_1+16] for filename in file_listP3_1]        #---------------------------------------------------------    Re       = 6.3781e6    ilevels_plot = np.array([0,1,2,3,4,5,6,7,8,9,10,15,20,25,30])    #---------------------------------------------------------    wrf_file = Dataset(WSM6_file,'r')    temp     = wrf.g_temp.get_tk(wrf_file)    pressure = wrf.g_pressure.get_pressure(wrf_file)    geopo_p  = wrf.g_geoht.get_height(wrf_file) # geopotential height as Mean Sea Level (MSL    z_level  = Re*geopo_p/(Re-geopo_p)    lat      =  wrf.getvar( wrf_file,"lat")     lon      =  wrf.getvar( wrf_file,"lon")        qr = funs.mixr2massconc( np.squeeze(wrf_file.variables["QRAIN"][0,:,:,:]  ), pressure, temp )            qi = funs.mixr2massconc( np.squeeze(wrf_file.variables["QICE"][0,:,:,:]   ), pressure, temp )            qc = funs.mixr2massconc( np.squeeze(wrf_file.variables["QCLOUD"][0,:,:,:] ), pressure, temp )           qs = funs.mixr2massconc( np.squeeze(wrf_file.variables["QSNOW"][0,:,:,:] ), pressure, temp )           qg = funs.mixr2massconc( np.squeeze(wrf_file.variables["QGRAUP"][0,:,:,:] ), pressure, temp )                           # Similarly get the P3_1 info    # wrf_file_P3 = Dataset(file_listP3_1[item],'r')    # print(file_listP3_1[item])              # temp_p3     = wrf.g_temp.get_tk(wrf_file_P3)    # pressure_p3 = wrf.g_pressure.get_pressure(wrf_file_P3)    # geopo_p_p3  = wrf.g_geoht.get_height(wrf_file_P3) # geopotential height as Mean Sea Level (MSL    # z_level_p3  = Re*geopo_p_p3/(Re-geopo_p_p3)    # lat_p3      =  wrf.getvar( wrf_file_P3,"lat")     # lon_p3      =  wrf.getvar( wrf_file_P3,"lon")        # qr_p3 = mixr2massconc( np.squeeze(wrf_file_P3.variables["QRAIN"][0,:,:,:]  ), pressure_p3, temp_p3 )            # qi_p3 = mixr2massconc( np.squeeze(wrf_file_P3.variables["QICE"][0,:,:,:]   ), pressure_p3, temp_p3 )            # qc_p3 = mixr2massconc( np.squeeze(wrf_file_P3.variables["QCLOUD"][0,:,:,:] ), pressure_p3, temp_p3 )                       for iz in ilevels_plot:                    fig, axes = plt.subplots(nrows=2, ncols=2, constrained_layout=True,figsize=[12,12])        pcm0 = axes[0,0].pcolormesh(lon, lat, qr[iz,:,:], vmin=1e-6, vmax=0.004)        pcm1 = axes[1,0].pcolormesh(lon, lat, qi[iz,:,:] + qs[iz,:,:] + qg[iz,:,:], vmin=1e-6, vmax=0.004)                       cbar = plt.colorbar(pcm0, ax=axes[0,0], shrink=1, label='qr [kg/m$^2$]')        cbar.cmap.set_under('white')        cbar = plt.colorbar(pcm1, ax=axes[1,0], shrink=1, label='qi+qs+qg [kg/m$^2$]')        cbar.cmap.set_under('white')                for i in range(2):            axes[i,0].grid()            axes[i,0].set_xlim([-65.5,-62])            axes[i,0].set_ylim([-33.5,-31.3])                        axes[0,0].set_title('WSM6 q_rain')                                                              axes[1,0].set_title('WSM6 q_i(tot)')          #pcm2 = axes[0,1].pcolormesh(lon_p3, lat_p3, qr_p3[iz,:,:], vmin=1e-5, vmax=0.001)        #pcm3 = axes[1,1].pcolormesh(lon_p3, lat_p3, qi_p3[iz,:,:],vmin=1e-5, vmax=0.001)                #        #cbar = plt.colorbar(pcm2, ax=axes[0,1], shrink=1, label='qr [kg/m$^2$]')        #cbar.cmap.set_under('white')        #cbar = plt.colorbar(pcm3, ax=axes[1,1], shrink=1, label='qi [kg/m$^2$]')        #cbar.cmap.set_under('white')                # for i in range(2):        #     axes[i,1].grid()        #     axes[i,1].set_xlim([-65.5,-62])        #     axes[i,1].set_ylim([-33.5,-31.3])                    #     axes[0,1].set_title('P3 3MOM LF q_rain')                                                          #     axes[1,1].set_title('P3 3MOM LF q_i')          #plt.suptitle( 'Level qx (z='+ iz +') ' + title + 'UTC')        plt.suptitle('Layer qx '+ ' (level:'+ str(iz)+' '+time +'UTC)')        # RMA1         [lat_radius, lon_radius] = pyplot_rings(radarLAT_RMA1,radarLON_RMA1,120)        for iax in range(2):             axes[iax,0].plot(lon_radius, lat_radius, 'k', linewidth=0.8, label='RMA1 (120km)')            axes[iax,1].plot(lon_radius, lat_radius, 'k', linewidth=0.8, label='RMA1 (120km)')        axes[0,0].legend(fontsize=10, loc='lower left')                 # #        #xx = np.vstack([x_wsm6[[0,2]],x_wsm6[[1,3]]])        #yy = np.vstack([y_wsm6[[0,2]],y_wsm6[[1,3]]])        #axes[0].plot(xx, yy, '-or' , linewidth=1.2)        # #        # xx = np.vstack([x_P3_3mom_LF[[0,2]],x_P3_3mom_LF[[1,3]]])        # yy = np.vstack([y_P3_3mom_LF[[0,2]],y_P3_3mom_LF[[1,3]]])        # axes[1].plot(xx, yy, '-or' , linewidth=1.2)        #        plt.show()        fig.savefig(save_dir_compare+'/Layer_qx_leveliz'+str(iz)+'_time'+str(time)+'.png', dpi=300,transparent=False, bbox_inches='tight')    return#------------------------------------------------------------------------------# RUN MAINdef main(exp):     folders=config_folders.config_folders('yakaira')        # Plot a general domain subplot 4x5 map of WRF_DBZ every 30 min    plot_general_WRF_evolution(WRFfolder=folders[exp], title=exp, save_dir_compare=folders['save_dir_compare'],                                other_WRFfolder='', OTHER_NAME='')    plot_general_WRF_evolution(WRFfolder=folders[exp], title=exp+'_Maitezoom', save_dir_compare=folders['save_dir_compare'],                                other_WRFfolder='', OTHER_NAME='')            # Make a foler for each experiment and save figure for each time    newdir = os.path.join(folders['save_dir_compare'], exp)     if not os.path.exists(newdir):            os.makedirs(newdir)    single_WRF_files(WRFfolder=folders[exp], title=exp+'_Maitezoom', save_dir_compare=newdir)    single_WRF_files(WRFfolder=folders[exp], title=exp, save_dir_compare=newdir)        return#------------------------------------------------------------------------------def check():         plot_domain('yakaira', 'WSM6_domain2')    plot_domain('yakaira', 'WSM6_domain3')    plot_domain('yakaira', 'WSM6_domain3_NoahMP')    plot_domain('yakaira', 'WSM6_domain4_NoahMP')        main('WSM6_domain2')    main('WSM6_domain3')    main('WSM6_domain3_NoahMP')    main('WSM6_domain4_NoahMP')        # Plot Zh 1km at 15:00, 18:00, and 20:00    EXP='WSM6_domain3_NoahMP'    plot_ZH1km_WRF(EXP, '15:00')    plot_ZH1km_WRF(EXP, '18:00')    plot_ZH1km_WRF(EXP, '20:00')    plot_ZH1km_WRF(EXP, '20:30')    plot_ZH1_COLMAX_WRF(EXP, '20:00')        plot_radar_singletime('', '15:00', 3, [-35,-31], [-65.5,-62])    plot_radar_singletime('cfrad.20181110_180327.0000_to_20181110_181008.0000_RMA1_0301_01.nc', '18:00', 3, [-35,-31], [-65.5,-62])    plot_radar_singletime('cfrad.20181110_200709.0000_to_20181110_201358.0000_RMA1_0301_01.nc', '20:00', 3, [-35,-31], [-65.5,-62])    plot_radar_singletime('cfrad.20181110_203154.0000_to_20181110_203835.0000_RMA1_0301_01.nc', '20:30', 3, [-35,-31], [-65.5,-62])        # Evolution of RMA1 to understund evolution of supercell  every 30 min     folders=config_folders.config_folders('yakaira')    plot_general_radar_evolution(radar_folder=folders['rma1_dir'], title='RMA1', save_dir_compare=folders['save_dir_compare'], elev=3)        # Agregar transectas para el EXP='WSM6_domain3_NoahMP' y su correspondiente p3    #-------------------------------------------------------------    x_wsm6 = np.array([-64.3, -63.5])    y_wsm6 = np.array([-31.75, -32.65])    all_WSM6 = sorted(glob.glob(os.path.join(folders['WSM6_domain3_NoahMP'], 'wrfout_d02_2018-11-10*')))        prefix = 'wrfout_d02_2018-11-10_'    start_index = all_WSM6[0].find(prefix) + len(prefix)    # =============================================================================    # TODO ESTO TENGO QUE ADAPTAR Y VOVLER A CORRER CON LAS SIGUIENTES VARIABLES UPDATED:    x_P3_3mom_LF = np.array([-63.6, -63.6, -63.8, -62.0])    y_P3_3mom_LF = np.array([-32.0, -33.0, -32.00, -33.5])      EXP_P3 = 'WSM6_domain3_NoahMP'        # =============================================================================    # One plot per layer of qx for WSM6 and P3    plot_common_transect_level_MAP('WSM6_domain3_NoahMP', '20:00')        # MAX_DBZ with transects to analyse     P4A.plot_common_transect_MAP('WSM6_domain3_NoahMP', EXP_P3, '20:00', folders['dow6_str'][4],                 folders['dow7_str'][4], folders['csapr2_str'][4], 'MAXRADAR_WRF', x_wsm6, y_wsm6, x_P3_3mom_LF, y_P3_3mom_LF)        # DBZ at level 4 with transects to analyse     P4A.plot_common_transect_MAP('WSM6_domain3_NoahMP', EXP_P3, '20:00', folders['dow6_str'][4],                 folders['dow7_str'][4], folders['csapr2_str'][4], 'RADAR_WRF_level4', x_wsm6, y_wsm6, x_P3_3mom_LF, y_P3_3mom_LF)    # Now Plot the transects    P4A.plot_common_transect_WSM6micro_ICE_derived('WSM6_domain3_NoahMP', x_wsm6, y_wsm6, '20:00')    #P4A.plot_common_transect_P3    # Domain average qxs    for ii, istr in enumerate(all_WSM6):         wrf_file_wsm6 = Dataset(all_WSM6[ii],'r')        #wrf_file_p3 = Dataset(strfile_P3_3MOM_LF[ii],'r')        itime = all_WSM6[ii][start_index:start_index+5]        # Plot maps of precip accumulation        #plot_accums(wrf_file_wsm6, wrf_file_p3, itime, save_dir_compare+'/WRFcompare/', dow6_str[1], dow7_str[1], csapr2_str[1])        # Plot domain average vertical profiles of qx.         P4A.plot_domain_qxs(wrf_file_wsm6, wrf_file_wsm6, itime, folders['save_dir_compare']+'/WSM6_domain3_NoahMP/')            # AGREGAR RT SMULATIONS?  esto esta en mi PC del trabajo?     return    