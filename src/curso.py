import os import datetimeimport globimport matplotlib.pyplot as pltfrom netCDF4 import Datasetimport numpy as npimport wrfimport Plots4Analysis as P4Aimport re import package_functions as funsimport pyart import config_foldersimport config_folders_finalfrom Plots4Analysis  import pyplot_ringsfrom matplotlib.patches import Polygonimport netCDF4 as ncimport matplotlib.colors as mcolorsimport package_functionsfrom matplotlib.cm import get_cmapfrom scipy.ndimage import gaussian_filterimport warningswarnings.filterwarnings("ignore")prov = np.genfromtxt("/home/vito.galligani/Work/Tools/Maps/provincias.txt", delimiter='')fn = '/home/vito.galligani/Work/Tools/etopo1_bedrock.nc'ds = nc.Dataset(fn)topo_lat = ds.variables['lat'][:]topo_lon = ds.variables['lon'][:]topo_dat = ds.variables['Band1'][:]/1e3lons_topo, lats_topo = np.meshgrid(topo_lon,topo_lat)   # Largest domainlatrange = [-40,-20]lonrange = [-65,-55]# Larger domain##latrange = [-35,-29]##lonrange = [-67,-60]# Midrange domain#latrange = [-35,-31]#lonrange = [-65.5,-62] # Super zoon domain#latrange = [-33,-31]#lonrange = [-65.5,-63.5]     plt.matplotlib.rc('font', family='serif', size = 12)plt.rcParams['xtick.labelsize']=12plt.rcParams['ytick.labelsize']=12  # Common figure template (3 subplots)#------------------------------------------------------------------------------#------------------------------------------------------------------------------def plot_smoothe5(lon, lat, ncfile_WSM6, VAR_WSM6, vmin, vmax, cmap, subplottitle, figname, save_dir):        if 'colmax' in figname:        colorbar_ticks = np.arange(vmin,vmax+0.01,10)        colorbar_label = 'colmax Zh [dBZ]'        sigmasmooth     = 1            elif 'RAIN' in figname:        colorbar_ticks = np.arange(vmin,vmax+0.01,10)        colorbar_label = 'hourly accumulated rain [mm]'                sigmasmooth     = 0.1            fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(8,8))     pcm1 = ax.pcolormesh(lon, lat,  gaussian_filter(VAR_WSM6, sigma=sigmasmooth), cmap=cmap, vmin=vmin, vmax=vmax)    cbar = plt.colorbar(pcm1, ax=ax, shrink=1, ticks=colorbar_ticks)    cbar.cmap.set_under('white')       ax.plot(prov[:,0],prov[:,1],color='k');     ax.set_xlim(lonrange)    ax.set_ylim(latrange)    ax.contour(lons_topo, lats_topo, topo_dat, levels=[0.5,1], colors=['gray','gray'], linewidths=2)        ax.set_xlabel('Longitude')    ax.set_ylabel('Latitude')        ax.set_title('WSM6'+' (YSU, e5 smooth '+ subplottitle+')')    fig.savefig(save_dir+'/'+figname+'.png', dpi=300,transparent=False, bbox_inches='tight')    plt.close()            return #------------------------------------------------------------------------------def curso_plot(lon, lat, ncfile_WSM6, ncfile_P3, ncfile_THOM, VAR_WSM6, VAR_P3, VAR_THOM, vmin, vmax, cmap, subplottitle, figname, save_dir):        if 'colmax' in figname:        colorbar_ticks = np.arange(vmin,vmax+0.01,10)        colorbar_label = 'colmax Zh [dBZ]'        sigmasmooth     = 1            elif 'RAIN' in figname:        colorbar_ticks = np.arange(vmin,vmax+0.01,10)        colorbar_label = 'hourly accumulated rain [mm]'                sigmasmooth     = 0.1            elif 'eth' in figname:        colorbar_ticks = np.arange(vmin,vmax+0.01,5)         colorbar_label = 'theta_e at 850hPa [K]'                sigmasmooth     = 0.1                    fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(17,5))     pcm1 = ax[0].pcolormesh(lon, lat,  gaussian_filter(VAR_WSM6, sigma=sigmasmooth), cmap=cmap, vmin=vmin, vmax=vmax)    pcm2 = ax[1].pcolormesh(lon, lat,  gaussian_filter(VAR_THOM, sigma=sigmasmooth), cmap=cmap, vmin=vmin, vmax=vmax)    pcm3 = ax[2].pcolormesh(lon, lat,  gaussian_filter(VAR_P3, sigma=sigmasmooth), cmap=cmap, vmin=vmin, vmax=vmax)        cbar = plt.colorbar(pcm1, ax=ax[0], shrink=1, ticks=colorbar_ticks)    cbar.cmap.set_under('white')    cbar = plt.colorbar(pcm2, ax=ax[1], shrink=1, ticks=colorbar_ticks)    cbar.cmap.set_under('white')    cbar = plt.colorbar(pcm3, ax=ax[2], shrink=1, ticks=colorbar_ticks,label=colorbar_label)    cbar.cmap.set_under('white')            if 'eth' in figname:                ua = wrf.getvar(ncfile_P3, "ua", units="kt")        va = wrf.getvar(ncfile_P3, "va", units="kt")        p  = wrf.getvar(ncfile_P3, "pressure")        u850_P3   = wrf.interplevel(ua, p, 850)        v850_P3   = wrf.interplevel(va, p, 850)        ua = wrf.getvar(ncfile_WSM6, "ua", units="kt")        va = wrf.getvar(ncfile_WSM6, "va", units="kt")        p  = wrf.getvar(ncfile_WSM6, "pressure")        u850_WSM6 = wrf.interplevel(ua, p, 850)        v850_WSM6 = wrf.interplevel(va, p, 850)        ua = wrf.getvar(ncfile_THOM, "ua", units="kt")        va = wrf.getvar(ncfile_THOM, "va", units="kt")        p  = wrf.getvar(ncfile_THOM, "pressure")        u850_THOM = wrf.interplevel(ua, p, 850)        v850_THOM = wrf.interplevel(va, p, 850)                    # agrego barbs at 850hPa         resobarb = 30        ax[0].barbs(wrf.to_np(lon[::resobarb,::resobarb]), wrf.to_np(lat[::resobarb,::resobarb]),                      wrf.to_np(u850_WSM6[::resobarb,::resobarb]),                      wrf.to_np(v850_WSM6[::resobarb,::resobarb]), length=6)        ax[1].barbs(wrf.to_np(lon[::resobarb,::resobarb]), wrf.to_np(lat[::resobarb,::resobarb]),                       wrf.to_np(u850_THOM[::resobarb,::resobarb]),                       wrf.to_np(v850_THOM[::resobarb,::resobarb]), length=6)        ax[2].barbs(wrf.to_np(lon[::resobarb,::resobarb]), wrf.to_np(lat[::resobarb,::resobarb]),                      wrf.to_np(u850_P3[::resobarb,::resobarb]),                      wrf.to_np(v850_P3[::resobarb,::resobarb]), length=6)                ax[0].text(0.5, 0.94, '950 hPa wind [kt]', transform=ax[0].transAxes,                   fontsize=10, verticalalignment='bottom', bbox=dict(boxstyle='round', facecolor='white', alpha=0.9))                ax[0].plot(prov[:,0],prov[:,1],color='k');     ax[1].plot(prov[:,0],prov[:,1],color='k');     ax[2].plot(prov[:,0],prov[:,1],color='k');     for ii in range(3):        ax[ii].set_xlim(lonrange)        ax[ii].set_ylim(latrange)        ax[ii].contour(lons_topo, lats_topo, topo_dat, levels=[0.5,1], colors=['gray','gray'], linewidths=2)        ax[0].set_xlabel('Longitude')    ax[0].set_ylabel('Latitude')        ax[0].set_title('WSM6'+' (YSU, '+ subplottitle+')')    ax[1].set_title('THOM'+' (YSU, '+ subplottitle+')')    ax[2].set_title('P3'+' (YSU, '+ subplottitle+')')        fig.savefig(save_dir+'/'+figname+'.png', dpi=300,transparent=False, bbox_inches='tight')    plt.close()            return # PLOT RAINC y COLMAX (SUAVIZADO?)#------------------------------------------------------------------------------#------------------------------------------------------------------------------def plots(EXP, date):            #EXP1 = '1domaintest_15hrs'        print('Running exp: '+EXP)        save_dir = '/home/vito.galligani/datosmunin3/Work/Studies/HAILCASE_10112018/Plots_curso/'+EXP    if not os.path.exists(save_dir):            os.makedirs(save_dir)                p3_dir   = '/home/vito.galligani/datosmunin3/Work/HAILCASE_10112018_datos/WRFOUT_1domain/P3_'+EXP+'/'     wsm6_dir = '/home/vito.galligani/datosmunin3/Work/HAILCASE_10112018_datos/WRFOUT_1domain/WSM6_'+EXP+'/'     thom_dir = '/home/vito.galligani/datosmunin3/Work/HAILCASE_10112018_datos/WRFOUT_1domain/THOM_'+EXP+'/'             all_files_ = sorted(glob.glob(os.path.join(wsm6_dir, 'wrfout_d01_2018-11-'+date+'*' )))    all_files_ = sorted([ os.path.basename(f) for f in glob.glob(os.path.join(wsm6_dir, 'wrfout_d01_2018-11-'+date+'*')) ])    prefix = 'wrfout_d01_2018-11-10_'    start_index = all_files_[0].find(prefix) + len(prefix)                # filter and keep only the hh:00 or hh:30 files    all_files = [f for f in all_files_ if f[-5:-3] in ("00", "30")]        counter=0    rain_prevWSM6 = 0    rain_prevP3   = 0    rain_prevTHOM = 0    for filename in all_files_:                print(filename)                times = filename[start_index:start_index+5]           ncfile_P3    = Dataset(p3_dir+filename,'r')                ncfile_WSM6  = Dataset(wsm6_dir+filename,'r')                ncfile_THOM  = Dataset(thom_dir+filename,'r')                rain_P3      = wrf.getvar(ncfile_P3, "RAINNC")        rain_WSM6    = wrf.getvar(ncfile_WSM6, "RAINNC")        rain_THOM    = wrf.getvar(ncfile_THOM, "RAINNC")        COLMAXREFL_P3   = np.nanmax(wrf.getvar(ncfile_P3, "REFL_10CM"), axis=0)          COLMAXREFL_WSM6 = np.nanmax(wrf.getvar(ncfile_WSM6, "REFL_10CM"), axis=0)        COLMAXREFL_THOM = np.nanmax(wrf.getvar(ncfile_THOM, "REFL_10CM"), axis=0)                eth      = wrf.g_temp.get_eth(ncfile_P3)               # equivalent potential temperature theta_e tita-e        eth_P3   = wrf.interplevel(eth, wrf.getvar(ncfile_P3, "pressure"), 850)        eth      = wrf.g_temp.get_eth(ncfile_WSM6)             # equivalent potential temperature theta_e tita-e        eth_WSM6 = wrf.interplevel(eth, wrf.getvar(ncfile_WSM6, "pressure"), 850)        eth      = wrf.g_temp.get_eth(ncfile_THOM)             # equivalent potential temperature theta_e tita-e        eth_THOM = wrf.interplevel(eth, wrf.getvar(ncfile_THOM, "pressure"), 850)                     lat          = wrf.getvar( ncfile_WSM6,"lat")         lon          = wrf.getvar( ncfile_WSM6,"lon")        # if counter == 0:        #     check_z0    = ncfile_P3.variables['HGT'][0,:,:]           # terrein height in m         #     fig, ax = plt.subplots(figsize=(8,8))         #     plt.pcolormesh(lon, lat,  check_z0)        #     fig.savefig(save_dir+'/checkterrainHeight.png', dpi=300,transparent=False, bbox_inches='tight')        #     plt.close()               if counter > 0:            rain_P3   = rain_P3-rain_prevP3            rain_WSM6 = rain_WSM6-rain_prevWSM6            rain_THOM = rain_THOM-rain_prevTHOM                rain_prevP3   = rain_P3.copy()        rain_prevWSM6 = rain_WSM6.copy()        rain_prevTHOM = rain_THOM.copy()        #curso_plot(lon, lat,  ncfile_WSM6, ncfile_P3, ncfile_THOM, rain_WSM6, rain_P3, rain_THOM,  0, 60, 'Blues', str(times), 'RAINNC_201811'+date+'_'+str(times), save_dir)         curso_plot(lon, lat,  ncfile_WSM6, ncfile_P3, ncfile_THOM, rain_WSM6, rain_P3, rain_THOM,  0, 60, 'Blues', str(times), 'RAIN_201811'+date+'_'+str(times), save_dir)         ##curso_plot(lon, lat,  ncfile_WSM6, 'ncfile_P3', 'ncfile_THOM', COLMAXREFL_WSM6, [], [],  0, 70, P4A.colormaps('ref'), str(times), 'colmax'+str(times), save_dir)        curso_plot(lon, lat,  ncfile_WSM6, ncfile_P3, ncfile_THOM, COLMAXREFL_WSM6, COLMAXREFL_P3, COLMAXREFL_THOM,  0, 70, P4A.colormaps('ref'), str(times), 'colmax_201811'+date+'_'+str(times), save_dir)        curso_plot(lon, lat,  ncfile_WSM6, ncfile_P3, ncfile_THOM, eth_WSM6, eth_P3, eth_THOM,  320, 360, "viridis", str(times), 'eth_201811'+date+'_'+str(times), save_dir)                        counter=counter+1                    return#------------------------------------------------------------------------------def plots_test_e5(EXP, date):            print('Running exp: '+EXP)        save_dir = '/home/vito.galligani/datosmunin3/Work/Studies/HAILCASE_10112018/Plots_curso/'+EXP    if not os.path.exists(save_dir):            os.makedirs(save_dir)    wsm6_dir = '/home/vito.galligani/datosmunin3/Work/HAILCASE_10112018_datos/WRFOUT_1domain/WSM6_'+EXP+'/'             all_files_ = sorted(glob.glob(os.path.join(wsm6_dir, 'wrfout_d01_2018-11-'+date+'*' )))    all_files_ = sorted([ os.path.basename(f) for f in glob.glob(os.path.join(wsm6_dir, 'wrfout_d01_2018-11-'+date+'*')) ])    prefix = 'wrfout_d01_2018-11-10_'    start_index = all_files_[0].find(prefix) + len(prefix)                # filter and keep only the hh:00 or hh:30 files    all_files = [f for f in all_files_ if f[-5:-3] in ("00", "30")]        for filename in all_files_:        print(filename)        times = filename[start_index:start_index+5]           ncfile_WSM6     = Dataset(wsm6_dir+filename,'r')                rain_WSM6       = wrf.getvar(ncfile_WSM6, "RAINNC")        COLMAXREFL_WSM6 = np.nanmax(wrf.getvar(ncfile_WSM6, "REFL_10CM"), axis=0)                eth      = wrf.g_temp.get_eth(ncfile_WSM6)             # equivalent potential temperature theta_e tita-e        eth_WSM6 = wrf.interplevel(eth, wrf.getvar(ncfile_WSM6, "pressure"), 850)                lat          = wrf.getvar( ncfile_WSM6,"lat")         lon          = wrf.getvar( ncfile_WSM6,"lon")        plot_smoothe5(lon, lat,  ncfile_WSM6, COLMAXREFL_WSM6,  0, 70, P4A.colormaps('ref'), str(times), 'colmax_201811'+date+'_'+str(times), save_dir)    return#------------------------------------------------------------------------------#------------------------------------------------------------------------------#plots('1domaintest') # for 18hrs#plots('1domaintest_12hrs_YSU', '10') #'1domaintest_15hrs'#plots('1domaintest_12hrs_YSU', '11') #'1domaintest_15hrs'plots_test_e5('1domaintest_12hrs_YSU_e5','10')